package com.polo.blog.model;
// Generated 14/04/2018 22:35:48 by Hibernate Tools 4.3.1


import com.polo.blog.model.data.DB;
import static javax.persistence.GenerationType.IDENTITY;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.Table;

/**
 * Tag generated by hbm2java
 */
@Entity
@Table(name="tag",catalog="blog")
public class Tag  implements java.io.Serializable {

    private Integer id;
    private String nome;
    private List<Post> posts = new ArrayList<>();

    public Tag() {
        super();
    }
   
    @Id 
    @GeneratedValue(strategy=IDENTITY)
    @Column(name="id", unique=true, nullable=false)
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }

    
    @Column(name="nome", nullable=false, length=20)
    public String getNome() {
        return this.nome;
    }
    
    public void setNome(String nome) {
        this.nome = nome;
    }

    @ManyToMany(fetch=FetchType.LAZY)
    @JoinTable(name="post_tag", catalog="blog", joinColumns = { 
    @JoinColumn(name="tag_id", nullable=false, updatable=false) }, inverseJoinColumns = { 
    @JoinColumn(name="post_id", nullable=false, updatable=false) })
    public List<Post> getPosts() {
        return this.posts;
    }
    
    public void setPosts(List<Post> posts) {
        this.posts = posts;
    }

    public void save(){
        if (id == null)
            DB.insert(this);
        else
            DB.update(this);
    }
    
    public void delete(){
        if (id != null)
            DB.delete(this);
    }
    
    public static List<Tag> getAll(){
        return (List<Tag>)DB.getAll(Tag.class);
    }
    
    public static List<Tag> find(String text){
        return (List<Tag>)DB.find(Tag.class,"nome like :nome", "%"+text+"%");
    }

    public boolean equals(Tag tag){
        return this.id.equals(tag.id);
    }
    
    @Override
    public String toString(){
        return "tag - id: "+id+", nome: "+nome+"";
    }
    
}


